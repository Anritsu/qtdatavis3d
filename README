-------------------------------------------------
Qt Data Visualization 0.1.0 (Techonology preview)
-------------------------------------------------

Qt Data Visualization module provides multiple graph types to visualize data in 3D space
both with C++ and Qt Quick 2.

System Requirements
===================

- Qt 5.1 or newer
- OpenGL 2.1 or newer (recommended) or OpenGL ES2 (reduced feature set)

Building
========
Configure project with qmake and build project with make:
    (Linux) make
    (Windows with MinGw) mingw32-make
    (Visual Studio) nmake
    (OSX) make

If you want to install the module to your Qt directory use:
    make install

If you want to uninstall the module
    make uninstall

Building as a statically linked library
=======================================

The same as above applies you will just have to add static to the CONFIG:
    qmake CONFIG+=static

Documentation
=============
Pregenerated documentation can be found from doc folder for both Qt Assistant
(qtdatavisualization.qch) and in HTML format (qtdatavisualization subfolder).

The documentation can also be generated with:
    make docs

Please refer to the generated documentation for more information:
    doc/qtdatavisualization/qtdatavisualization-index.html

Known Issues
============

The technology preview version is still missing some features entirely, while some
others may be only partially implemented. Here are some known issues:

- Scatter graphs can only show zero centered axis ranges properly.
- Value axis range of a bar graph with negative values need to be zero
  centered to display properly.
- Selection API is missing for surface graphs.
- Shadows do not work for surface graphs.
- Mac: Graphs drawn half the size on Retina displays.
- Using multiple graphs in one application crashes on application shutdown
  unless the last graph to have active context is deleted last.
- Android doesn't support both widgets and OpenGL simulataneously, so only
  the Qt Quick 2 API is usable in practice in Android.
- Shadows are not supported with OpenGL ES2 (including Angle builds in Windows).
