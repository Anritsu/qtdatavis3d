---------------------------------------------------
Qt Data Visualization 1.0.0 (Techonology preview 2)
---------------------------------------------------

Qt Data Visualization module provides multiple graph types to visualize data in 3D space
both with C++ and Qt Quick 2.

System Requirements
===================

- Qt 5.2 or newer
- OpenGL 2.1 or newer (recommended) or OpenGL ES2 (reduced feature set)

Platform specific recommendations:
- Mac: OSX 10.8 recommended

Building
========
Configure the project with qmake:
    qmake

After running qmake, build the project with make:
    (Linux) make
    (Windows with MinGw) mingw32-make
    (Windows with Visual Studio) nmake
    (OSX) make

The above generates the default makefiles for your configuration, which is typically
the release build if you are using precompiled binary Qt distribution. To build both
debug and release, or one specifically, use one of the following qmake lines instead.

For debug builds:
    qmake CONFIG+=debug
    make
  or
    qmake CONFIG+=debug_and_release
    make debug

For release builds:
    qmake CONFIG+=release
    make
  or
    qmake CONFIG+=debug_and_release
    make release

For both builds (Windows/Mac only):
    qmake CONFIG+="debug_and_release build_all"
    make

After building, install the module to your Qt directory:
    make install

If you want to uninstall the module:
    make uninstall

Building as a statically linked library
=======================================

The same as above applies, you will just have to add static to the CONFIG:
    qmake CONFIG+=static

Documentation
=============
Pregenerated documentation can be found from doc folder for both Qt Assistant
(qtdatavisualization.qch) and in HTML format (qtdatavisualization subfolder).

The documentation can also be generated with:
    make docs

Please refer to the generated documentation for more information:
    doc/qtdatavisualization/qtdatavisualization-index.html

Known Issues
============

- Using multiple graphs in one application crashes on application shutdown
  unless the last graph to have active context is deleted last.
- Android doesn't support both widgets and OpenGL simultaneously, so only
  the Qt Quick 2 API is usable in practice in Android.
- Shadows are not supported with OpenGL ES2 (including Angle builds in Windows).
- Anti-aliasing doesn't work with OpenGL ES2 (including Angle builds in Windows).
- Surfaces with non-straight rows and columns do not always render properly.
- Wrong item can end up selected if you do mouse selection and data removes/inserts
  simultaneously due to the asynchronous nature of mouse selection handling.
- Q3DLight class (and Light3D QML item) are currently not usable for anything.
- Q3DScene::secondarySubviewOnTop property has currently no effect.
- The color style Q3DTheme::ColorStyleObjectGradient doesn't work for surface graphs.
- Scatter "point" meshes do not support gradients, they always use the base color.
