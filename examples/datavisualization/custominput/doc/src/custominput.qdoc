/****************************************************************************
**
** Copyright (C) 2014 Digia Plc
** All rights reserved.
** For any questions to Digia, please use contact form at http://qt.digia.com
**
** This file is part of the QtDataVisualization module.
**
** Licensees holding valid Qt Enterprise licenses may use this file in
** accordance with the Qt Enterprise License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.
**
** If you have questions regarding the use of this file, please use
** contact form at http://qt.digia.com
**
****************************************************************************/

/*!
    \example custominput
    \title Custom Input Example
    \ingroup qtdatavisualization_examples
    \brief Implementing custom input handler in a widget application.

    The Custom Input example shows how to customize the 3D graph controls in a widget application using a custom graph input handler to capture and process mouse events.
    The code in this example shows also how the camera is controlled by using QPropertyAnimation to animate the camera and item selection
    is done on mouseover rather than clicking any mouse buttons. Also the code shows how to implement similar zoom with mouse wheel functionality as the default
    input handler implements.

    \image custominput-example.png

    \section1 Replacing default input handling

    The default input handling mechanism is replaced by setting the active input handler of \l Q3DScatter
    to \c CustomInputHandler that implements the custom behavior.

    \snippet ../examples/custominput/scatterdatamodifier.cpp 0

    \section1 Implementing custom selection handling

    The on mouseover selection handling is implemented in the \c CustomInputHandler that captures the mouse events.
    It then stores the last known coordinates to the \l QAbstract3DInputHandler::inputPosition property.

    \snippet ../examples/custominput/custominputhandler.cpp 0

    As the selection is one shot, and is cleared each time a 3D frame is rendered, a timer is setup to retrigger selection so that the selection moves to the item
    currently under the mouse cursor as the camera animates around the graph even when the mouse cursor is not moving.

    \snippet ../examples/custominput/scatterdatamodifier.cpp 1

    \section1 Implementing custom zoom handling

    The camera has a zoom factor that represents amount of zoom in percentages. In this example the zoom range is limited
    between 10% and 500%. This range is then divided to four subranges where \c angleDelta is scaled to different amount of zoom change
    based on the current subrange.

    \snippet ../examples/custominput/custominputhandler.cpp 1

    \section1 Implementing custom camera handling

    The camera is animated to constantly rotate around the graph with two animations. The rotation around the graph is done with
    a simple QPropertyAnimation that just increments during 20 seconds from 0 degrees to 360 degrees and sets the \l Q3DCamera::xRotation property.

    \snippet ../examples/custominput/scatterdatamodifier.cpp 2

    The camera movement up and down is implemented with a QSequentialAnimationGroup that varies the \l Q3DCamera::yRotation property of the camera
    from 5 degrees to 45 degrees and back with in and out easing.

    \snippet ../examples/custominput/scatterdatamodifier.cpp 3
*/
