/****************************************************************************
**
** Copyright (C) 2013 Digia Plc
** All rights reserved.
** For any questions to Digia, please use contact form at http://qt.digia.com
**
** This file is part of the QtDataVisualization module.
**
** Licensees holding valid Qt Enterprise licenses may use this file in
** accordance with the Qt Enterprise License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.
**
** If you have questions regarding the use of this file, please use
** contact form at http://qt.digia.com
**
****************************************************************************/

/*!
 * \qmltype Bars3D
 * \inherits AbstractGraph3D
 * \inmodule QtDataVisualization
 *
 * This type enables developers to render bar graphs in 3D with Qt Quick 2.
 *
 * You will need to import data visualization module to use this type:
 *
 * \snippet doc_src_qmldatavisualization.cpp 0
 *
 * After that you can use Bars3D in your qml files:
 *
 * \snippet doc_src_qmldatavisualization.cpp 1
 *
 * See \l{Qt Quick 2 Barchart Example} for more thorough usage example.
 *
 * \sa ItemModelBarDataProxy, Scatter3D, Surface3D, {Qt Data Visualization C++ Classes}
 */

/*!
 * \qmlmethod void Bars3D::setBarColor(const QColor &baseColor, bool uniform)
 * Set bar color using your own color. \a baseColor sets the base color of a bar. The \a uniform
 * -flag is used to define if color needs to be uniform throughout bar's length, or will the colors
 * be applied by height, starting with dark at the bottom. It is \c true by default.
 *
 * Calling this method overrides colors from theme.
 *
 * \sa AbstractGraph3D::theme
 *
 * \warning This method is subject to change.
 */

/*!
 * \qmlproperty BarDataProxy Bars3D::dataProxy
 * The active data proxy.
 *
 * If a proxy is not given, a temporary default proxy is created and activated.
 * This temporary proxy is destroyed if another proxy is explicitly set active via this property.
 */

/*!
 * \qmlproperty CategoryAxis3D Bars3D::rowAxis
 * A user-defined row axis.
 *
 * If an axis is not given, a temporary default axis with no labels is created.
 * This temporary axis is destroyed if another axis is explicitly set to same orientation.
 */

/*!
 * \qmlproperty ValueAxis3D Bars3D::valueAxis
 * A user-defined value axis.
 *
 * If an axis is not given, a temporary default axis with no labels and automatically adjusting
 * range is created.
 * This temporary axis is destroyed if another axis is explicitly set to same orientation.
 */

/*!
 * \qmlproperty CategoryAxis3D Bars3D::columnAxis
 * A user-defined column axis.
 *
 * If an axis is not given, a temporary default axis with no labels is created.
 * This temporary axis is destroyed if another axis is explicitly set to same orientation.
 */


/*!
 * \qmlproperty Bars3D.MeshStyle Bars3D::barType
 * Bar object type.
 */

/*!
 * \qmlproperty real Bars3D::barThickness
 * Bar thickness ratio between X and Z dimensions. 1.0 means bars are as wide as they are deep, 0.5
 * makes them twice as deep as they are wide.
 */

/*!
 * \qmlproperty size Bars3D::barSpacing
 * Bar spacing in X and Z dimensions.
 */

/*!
 * \qmlproperty bool Bars3D::barSpacingRelative
 * Relative or absolute bar spacing.
 */

/*!
 * \qmlproperty bool Bars3D::barSmoothingEnabled
 * Bar smoothing. If false, bar shading is flat.
 */

/*!
 * \qmlproperty string Bars3D::meshFileName
 * Override bar type with a mesh object.
 * \note Object needs to be in Wavefront obj format and include vertices, normals and UVs.
 * It also needs to be in triangles.
 */

/*!
 * \qmlproperty int Bars3D::rows
 * Row count of data window.
 */

/*!
 * \qmlproperty int Bars3D::columns
 * Column count of data window.
 */

/*!
 * \qmlproperty point Bars3D::selectedBarPos
 * Position of the selected bar in data window. Only one bar can be selected at a time.
 * To clear selection, specify an illegal position, e.g. Qt.point(-1.0, -1.0).
 */
